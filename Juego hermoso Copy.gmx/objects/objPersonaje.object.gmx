<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPersonajeR</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicialización de las variables
grav = 0.3;
hsp = 0;
hsp_carry = 0;
vsp = 0;

movespeed_normal = 4;
jumpspeed_normal = 7;
jumpspeed_powerup = 10;
movespeed_powerup = 10
 
jumpspeed = jumpspeed_normal 
movespeed = movespeed_normal
 
key_down = 0;

if (global.checkpointR == room) 
{
    x = global.checkpointx;
    y = global.checkpointy; 
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Gestión Llaves
Morado = false;
Naranjado = false;
Amarillo = false;
Verde = false;
Llave = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movespeed = movespeed_normal;
sprite_index = sprPersonajeR
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpspeed = jumpspeed_normal;
sprite_index = sprPersonajeR
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movimiento del personaje

// Obtener las entradas de teclado
key_right = keyboard_check (vk_right);
key_left = keyboard_check (vk_left);
key_jump = keyboard_check_pressed (vk_up);
key_down = keyboard_check (vk_down);

// Operaciones con las entradas del teclado
move = key_right - key_left; 
hsp = move * movespeed;

if (vsp &lt; 10) {vsp += grav;}

if (place_meeting (x, y+1, objMuroPapi))
{
    if (key_jump) vsp = -jumpspeed;
}
 var hsp_final = hsp + hsp_carry; 
 hsp_carry = 0; 

// Colisión Horizontal
if (place_meeting( x+hsp_final, y, objMuroPapi))
{
    while (!place_meeting (x+sign(hsp_final), y, objMuroPapi)){
        x += sign(hsp_final);
    }
    hsp_final = 0;
    hsp = 0;
}


x += hsp_final; 



// Colisión Vertical 
if (place_meeting( x, y+vsp, objMuroPapi))
{
    while (!place_meeting (x, y+sign(vsp), objMuroPapi))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
 y += vsp;
 


 


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gestión de llaves
if (place_meeting (x,y,objLlave))
{
with (objLlave){instance_destroy();}
Llave = true;
}

if (place_meeting (x,y,objBotonMorado))
{
with (objBotonMorado){instance_destroy();}
Morado = true;
}

if (place_meeting (x,y,objBotonNaranjado))
{
with (objBotonNaranjado){instance_destroy();}
Naranjado = true;
}


if (place_meeting (x,y,objBotonVerde))
{
with (objBotonVerde){instance_destroy();}
Verde = true;
}



if (place_meeting (x,y,objBotonAmarillo))
{
with (objBotonAmarillo){instance_destroy();}
Amarillo = true;
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gestion de Puertas
if (Llave)
{
if (place_meeting(x+movespeed,y, objCandado))||
    (place_meeting(x,y-movespeed, objCandado))||
    (place_meeting(x,y+movespeed, objCandado))||
    (place_meeting(x-movespeed,y, objCandado))
  
    {
    with (objCandado) {instance_destroy();}
    }
}

if (Naranjado)
{
if (place_meeting(x+movespeed,y, objMuroNaranjado))||
    (place_meeting(x,y-movespeed, objMuroNaranjado))||
    (place_meeting(x,y+movespeed, objMuroNaranjado))||
    (place_meeting(x-movespeed,y, objMuroNaranjado))
  
    {
    with (objMuroNaranjado) {instance_destroy();}
    }
}

if (Amarillo)
{
if (place_meeting(x+movespeed,y, objMuroAmarillo))||
    (place_meeting(x,y-movespeed, objMuroAmarillo))||
    (place_meeting(x,y+movespeed, objMuroAmarillo))||
    (place_meeting(x-movespeed,y, objMuroAmarillo))
  
    {
    with (objMuroAmarillo) {instance_destroy();}
    }
}


if (Verde)
{
if (place_meeting(x+movespeed,y, objMuroVerde))||
    (place_meeting(x,y-movespeed, objMuroVerde))||
    (place_meeting(x,y+movespeed, objMuroVerde))||
    (place_meeting(x-movespeed,y, objMuroVerde))
  
    {
    with (objMuroVerde) {instance_destroy();}
    }
}

if (Morado)
{
if (place_meeting(x+movespeed,y, objMuroMorado))||
    (place_meeting(x,y-movespeed, objMuroMorado))||
    (place_meeting(x,y+movespeed, objMuroMorado))||
    (place_meeting(x-movespeed,y, objMuroMorado))
  
    {
    with (objMuroMorado) {instance_destroy();}
    }
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPuerta">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
{
room_goto(NivelBonus);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objMuerteBonus">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objMuerteBonus)
{
scr_death ();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBala">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other)
{
health -=10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objMeta">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room_exists (room_next(room)))
{
room_goto_next();
}
else
{
room_goto(Inicio);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
